{{- range $key, $value := .Values.frontend }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $value.name }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "generic-service.labels" . | nindent 4 }}
spec:
  replicas: {{ $value.replicaCount }}
  selector:
    matchLabels:
      {{- include "generic-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "generic-service.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ $value.repository }}:{{ $value.tag }}"
          imagePullPolicy: {{ $value.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ $value.port }}
              protocol: TCP
          resources:
            {{- toYaml $value.resources | nindent 12 }}
          volumeMounts:
            {{- range $key, $value := .Values.keyinjection }}
            - name: {{ $value.name }}
              mountPath: {{ $value.mountPath }}
              readOnly: true
            {{- end }}
        ## Running the Agent as a side-car
        # https://docs.datadoghq.com/integrations/eks_fargate/
        - name: datadog-agent
          image: datadog/agent
          ## Enabling port 8126 for Trace collection
          ports:
            - containerPort: 8126
              name: traceport
              protocol: TCP
          env:
          - name: DD_API_KEY
            valueFrom:
              secretKeyRef:
                name: datadog-api-key
                key: api-key
            ## Set DD_SITE to "datadoghq.eu" to send your
            ## Agent data to the Datadog EU site
          - name: DD_SITE
            value: "datadoghq.com"
          - name: DD_EKS_FARGATE
            value: "true"
          - name: DD_CLUSTER_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: data.cluster-name
          - name: DD_KUBERNETES_KUBELET_NODENAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          resources:
              requests:
                memory: "256Mi"
                cpu: "200m"
              limits:
                memory: "256Mi"
                cpu: "200m"
      volumes:
        {{- range $key, $value := .Values.keyinjection }}
        - name: {{ $value.name }}
          secret:
            secretName: {{ $value.secretName }}
        {{- end }}
{{- end -}}
